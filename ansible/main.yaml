---
- name: FULL INSTRASTRUCTURE DEPLOY
  hosts: all
  become: true
  become_method: sudo

  vars:
    OS_USER: "admin"
    KUBECONFIG_PATH: "/home/{{ OS_USER }}/.kube/config"
    HELM_URL: "https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
    SEND_NOTIFICATIONS:   false
    ENABLE_MONITORING:    false
    OPEN_PORT_GRAFANA:    false
    ENABLE_EDA_STACK:     true
    ENABLE_ARGOCD:        true
    OPEN_PORT_ARGOCD:     true

  tasks:

# -----------------------------------------
# BASE PACKAGE AND KUBERNETES
# -----------------------------------------

      - name: apt update
        ansible.builtin.apt:
          update_cache: yes

      - name: Install packages
        ansible.builtin.apt:
          pkg:
          - wget 
          - curl 
          - snapd 
          - git 
          - kubecolor

      - name: Install snapd
        community.general.snap:
          name:
            - snapd

      - name: Install microk8s
        community.general.snap:
          name: 
            - microk8s
          classic: true

      - name: Install helm
        ansible.builtin.shell: |
            curl -fsSL -o get_helm.sh {{ HELM_URL }}
            chmod 700 get_helm.sh
            ./get_helm.sh
            rm get_helm.sh
        args:
          executable: /bin/bash

      - name: Install kubectl
        ansible.builtin.shell: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv ./kubectl /usr/local/bin/kubectl 
        args:
          executable: /bin/bash

      - name: Create .kube directory
        ansible.builtin.file:
          path: "/home/{{ OS_USER }}/.kube"
          state: directory
          owner: "{{ OS_USER }}"
          group: "{{ OS_USER }}"
          mode: "0755"

      - name: Add {{ OS_USER }} to microk8s group
        ansible.builtin.user:
          name: "{{ OS_USER }}"
          groups: microk8s
          append: yes

#-----------------------------------------------------------------------
# Acá hay un problema interesante y es que el cambio de grupo (usermod -a -G microk8s admin) 
# no tiene efecto en la sesión SSH actual que usa Ansible por que usa siempre la misma conexión SSH.
# Entonces para que tenga efecto, reinicio la conexion y en vez de usar el kubectl y helm de snap 
# uso los binarios originales,asi me mantiene los comandos como si los usara directamente por consola.
#    ;)
#-----------------------------------------------------------------------
      - name: Reset SSH connection to apply changes
        meta: reset_connection

      - name: Wait until microk8s is ready
        register: microk8s_status
        ansible.builtin.shell: |
          /snap/bin/microk8s status --wait-ready
        args:
          executable: /bin/bash

      - name: Enable storage
        ansible.builtin.shell: |
            sudo /snap/bin/microk8s enable storage
        args:
          executable: /bin/bash

      - name: Enable hostpath-storage
        ansible.builtin.shell: |
            sudo /snap/bin/microk8s enable hostpath-storage
        args:
          executable: /bin/bash

      - name: Export kubeconfig for admin
        ansible.builtin.shell: |
          sudo /snap/bin/microk8s config > "{{ KUBECONFIG_PATH }}"
        args:
          executable: /bin/bash

      - name: Set ownership for use kubeconfig
        ansible.builtin.file:
          path: "{{ KUBECONFIG_PATH }}"
          owner: "{{ OS_USER }}"
          group: "{{ OS_USER }}"
          mode: "0644"

      - name: Configure kubecolor
        become_user: "{{ OS_USER }}"
        ansible.builtin.shell: |
            echo 'alias kubectl="kubecolor"' >>  /home/{{ OS_USER }}/.bashrc
        args:
          executable: /bin/bash            

# -----------------------------------------
# MONITORING STACK
# -----------------------------------------

      - name: Add helm repo prometheus
        when: ENABLE_MONITORING
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm_repository:
          name: prometheus-community
          repo_url: https://prometheus-community.github.io/helm-charts

      - name: Install Prometheus.
        when: ENABLE_MONITORING
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm:
          name: prometheus
          chart_ref: prometheus-community/prometheus
          release_namespace: monitoring
          create_namespace: true
          wait: true

      - name: Add helm repo grafana
        when: ENABLE_MONITORING
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm_repository:
          name: grafana
          repo_url: https://grafana.github.io/helm-charts

      - name: Install Loki
        when: ENABLE_MONITORING
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm:
          name: loki
          chart_ref: grafana/loki-stack
          release_namespace: monitoring
          create_namespace: true
          wait: true

      - name: Install Grafana
        when: ENABLE_MONITORING
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm:
          name: grafana
          chart_ref: grafana/grafana
          release_namespace: monitoring
          create_namespace: true
          wait: true
          values_files:
            - https://raw.githubusercontent.com/jpradoar/event-driven-architecture/refs/heads/main/monitoring/grafana-values.yaml

      - name: Open grafana port
        when: OPEN_PORT_GRAFANA
        become_user: "{{ OS_USER }}"
        ansible.builtin.shell: |
            nohup kubectl -n monitoring port-forward --address 0.0.0.0 service/grafana 3000:80 > /tmp/kubectl_grafana.log 2>&1 &
        args:
          executable: /bin/bash

# -----------------------------------------
# EDA STACK
# -----------------------------------------
      - name: Add helm repo jpradoar
        when: ENABLE_EDA_STACK
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm_repository:
          name: jpradoar
          repo_url: https://jpradoar.github.io/helm-chart

      - name: Deploy EDA stack
        when: ENABLE_EDA_STACK
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm:
          name: mqtt
          chart_ref: jpradoar/event-driven-architecture
          release_namespace: default
          create_namespace: true
          wait: true

      - name: Open ports EDA stack
        when: ENABLE_EDA_STACK
        become_user: "{{ OS_USER }}"
        ansible.builtin.shell: |
            nohup kubectl port-forward --address 0.0.0.0 deployment/producer 5000:5000 > /tmp/kubectl_producer.log 2>&1 &
            sleep 1
            nohup kubectl port-forward --address 0.0.0.0 deployment/webserver 8080:80 > /tmp/kubectl_webserver.log 2>&1 &
            sleep 1
            nohup kubectl port-forward --address 0.0.0.0 service/mqtt-rabbitmq 15672:15672 > /tmp/kubectl_rabbitmq.log 2>&1 &
        args:
          executable: /bin/bash

# -----------------------------------------
# ARGOCD
# -----------------------------------------
      - name: Add ArgoCD helm repo
        when: ENABLE_ARGOCD
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm_repository:
          name: argocd
          repo_url: https://argoproj.github.io/argo-helm

      - name: Install ArgoCD
        when: ENABLE_ARGOCD
        become_user: "{{ OS_USER }}"
        kubernetes.core.helm:
          name: argocd
          chart_ref: argocd/argo-cd
          release_namespace: argocd
          create_namespace: true
          wait: true

      - name: Get ArgoCD initial-admin-secret
        when: ENABLE_ARGOCD
        become_user: "{{ OS_USER }}"
        ansible.builtin.shell: |
            kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
        args:
          executable: /bin/bash
        register: argocd_initial_admin_secret
        environment:

      - name: Show ArgoCD secret
        when: ENABLE_ARGOCD
        debug:
          msg: "ArgoCD admin password: {{ argocd_initial_admin_secret.stdout }}"

      - name: Clone gitops repo
        when: ENABLE_ARGOCD
        ansible.builtin.git:
          repo: 'https://github.com/jpradoar/gitops.git'
          dest: /tmp/gitops

      - name: ArgoCD base config
        when: ENABLE_ARGOCD
        become_user: "{{ OS_USER }}"
        ansible.builtin.shell: |
            kubectl apply -Rf /tmp/gitops/argocd/
        args:
          executable: /bin/bash          

      - name: ArgoCD base apps
        become_user: "{{ OS_USER }}"
        ansible.builtin.shell: |
            kubectl apply -Rf /tmp/gitops/applicationsets/
        args:
          executable: /bin/bash  

      - name: Open ports ArgoCD
        become_user: "{{ OS_USER }}"
        when: OPEN_PORT_ARGOCD
        ansible.builtin.shell: |
            nohup kubectl -n argocd  port-forward --address 0.0.0.0 service/argocd-server 8081:80 > /tmp/kubectl_argocd.log 2>&1 &
        args:
          executable: /bin/bash

# -----------------------------------------
# GLOBAL AND GENERALS
# -----------------------------------------

      - name: Send Slack notificación
        when: SEND_NOTIFICATIONS
        uri:
          url: "{{ lookup('env', 'SLACK_WEBHOOK') }}" # Esto está en el .bashrc o haciendo un export SLACK_WEBHOOK="...."
          method: POST
          headers:
            Content-Type: "application/json"
          body: '{"text":"Deployment finished, infrastructure will be ready in a few minutes..."}'
          body_format: json
        ignore_errors: yes

      - name: Show process
        register: show_process
        ansible.builtin.shell: |
            ps aux |grep -i forwa |grep -v grep
        args:
          executable: /bin/bash
      - debug:
         msg: "{{ show_process.stdout }}"
